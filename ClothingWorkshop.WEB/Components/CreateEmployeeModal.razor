@using ClothingWorkshop.WEB.Services;
@inherits OwningComponentBase<EmployeeService>
@inject NavigationManager Navigation


@*@inject EmployeesService EmployeeService*@



@if (isVisible)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Employee</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">


                    <EditForm Model="newEmployee" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Name:</label>
                            <InputText class="form-control" @bind-Value="newEmployee.Name" />
                        </div>
                        <div class="form-group">
                            <label>Occupation:</label>
                            <InputText class="form-control" @bind-Value="newEmployee.Occupation" />
                        </div>
                        <button type="submit" class="btn btn-primary">Create</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </EditForm>



                </div>
            </div>
        </div>
    </div>
}
@code {
        [Parameter]
        public EventCallback OnEmployeeAdded { get; set; }

        private Models.EmployeeDto newEmployee = new Models.EmployeeDto();



    private bool isVisible = false;

    public void Show()
    {
        isVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        isVisible = false;
        StateHasChanged();
    }



        private async Task HandleValidSubmit()
        {
            await Service.AddEmployeeAsync(newEmployee);
            await OnEmployeeAdded.InvokeAsync();
            CloseModal();
        }

        private void CloseModal()
        {
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
}

